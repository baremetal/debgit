#!/usr/bin/env python
"""
debgit-get-version <branch> [options]

Generate a software version relative to Git tags.

This program will produce a unique version number for a commit based on the
closest tag that is found.  The git tag is found using the command `git
describe --tags`.  When the HEAD commit is tagged, the tag itself is used.  The
tag's version is assumed to be in the format: <major>.<minor>[.revision].

Non-tagged entries return a string that is in the format:

<tag>-<revisions since tag>-g<7-character hash>

For example:

0.1-2-g30e80d1

Tagged revisions look like:

0.2

The first example is converted into the format:

<tag>+<YY><DDD>.<HH><MM>+g<7-character hash>

For example:

0.1+12334.1513+g30e80d1

This is long and verbose, but using this date-based convention for non-tagged
entries will ensure that any previously-built package that is a child of this
tag will be considered older than newly-built packages.  Keeping the hash
reference in the version number makes it easy to find the commit in the
repository.
"""
import os
import sys
import time

import sh

from clint.command import Command


class Debchange(Command):
    def __init__(self, doc=None):
        super(Debchange, self).__init__(doc=doc or __doc__)

    def run(self):
        git_version = ''
        git_sha = None
        now = time.strftime('%y%j.%H%M')

        try:
            git_describe = str(sh.git('describe', tags=True).strip())
            git_describe_split = git_describe.split('-')

            git_version = git_describe_split[0]

            if len(git_describe_split) > 1:
                git_sha = git_describe_split[-1]
        except sh.ErrorReturnCode_128:
            git_version = '0.0'

        # when no sha is found, we are on an actual tag rather than development
        # from a particular tag.  in this case, simply use the bare version
        # number rather than generating a date+sha-based version number.
        if git_sha:
            sw_version = '{0}+{1}+{2}'.format(git_version, now, git_sha)
        else:
            sw_version = git_version

        print sw_version

if __name__ == '__main__':
    command = Debchange()
    try:
        command.run()
    except KeyboardInterrupt:
        command.quit()
