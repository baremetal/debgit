#!/usr/bin/env python
"""
debgit-get-version <branch> [options]

Generate a software version relative to Git tags.

This program will produce a unique version number for a commit based on the
closest tag that is found.  The git tag is found using the command `git
describe --tags`.  When the HEAD commit is tagged, the tag itself is used.  The
tag's version is assumed to be in the format: <major>.<minor>[.revision].

Non-tagged entries return a string that is in the format:

<tag>-<revisions since tag>-g<7-character hash>

For example:

0.1-2-g30e80d1

Tagged revisions look like:

0.2

The first example is converted into the format:

<tag>+<YY><DDD>.<HH><MM>+g<7-character hash>

For example:

0.1+12334.1513+g30e80d1

This is long and verbose, but using this date-based convention for non-tagged
entries will ensure that any previously-built package that is a child of this
tag will be considered older than newly-built packages.  Keeping the hash
reference in the version number makes it easy to find the commit in the
repository.
"""
from clint.command import Command

from debgit.version import get_version


class GetVersion(Command):
    def __init__(self, doc=None):
        super(GetVersion, self).__init__(doc=doc or __doc__)

    def run(self):
        print get_version()

if __name__ == '__main__':
    command = GetVersion()
    try:
        command.run()
    except KeyboardInterrupt:
        command.quit()
